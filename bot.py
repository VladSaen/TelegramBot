import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    CallbackQueryHandler
)
from telegram.error import BadRequest

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
WEBHOOK_URL = os.getenv("RENDER_URL") 

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø–æ—Ä—Ç
IS_WEBHOOK_MODE = bool(WEBHOOK_URL)
PORT = int(os.environ.get('PORT', 8080))

# --- –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –°–¢–ê–ù ---
# –£–≤–∞–≥–∞: –¶–µ–π —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –ª–∏—à–µ —É –ø–∞–º'—è—Ç—ñ —ñ —Å–∫–∏–¥–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞ Render).
BLOCKED_USERS = set() 

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# --------------------

# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –Ω–∞–¥–∞–Ω–∏–π ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        return int(user_id) == int(ADMIN_ID)
    except (ValueError, TypeError):
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∏-–ø—ñ–¥–∫–∞–∑–∫–∏."""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ /start")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏-–ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    keyboard = [
        [InlineKeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ó–∞—è–≤–∫—É (–¢–µ–∫—Å—Ç)", callback_data='action_text_guide')],
        [InlineKeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –§–æ—Ç–æ/–ú–µ–¥—ñ–∞", callback_data='action_photo_guide')],
        [InlineKeyboardButton("–ü—Ä–æ –ë–æ—Ç–∞ / –î–æ–ø–æ–º–æ–≥–∞", callback_data='action_help_info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! ‚ö° –Ø –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ —Ñ–æ—Ç–æ.",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –¥–æ–≤—ñ–¥–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —Ä—ñ–∑–Ω—É –¥–ª—è –∞–¥–º—ñ–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user_id = update.effective_user.id
    if is_admin(user_id):
        await update.message.reply_text(
            "üë®‚Äçüíº **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
            "1. **–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:** \n   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏' –ø—ñ–¥ –∑–∞—è–≤–∫–æ—é, —â–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É `/reply <ID>`.\n"
            "2. **–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:** \n   - `/block <ID>`: –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n   - `/unblock <ID>`: –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n"
            "3. **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** \n   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/admin_status` –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.\n\n"
            "4. **–ó–∞—è–≤–∫–∏:** –£—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–∫–ª—é—á–Ω–æ –∑ –º–µ–¥—ñ–∞) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—é—Ç—å—Å—è —Å—é–¥–∏."
        , parse_mode='Markdown')
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await update.message.reply_text("üëã –©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å `/start` —ñ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏-–ø—ñ–¥–∫–∞–∑–∫–∞–º–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /admin_status
async def admin_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    status_text = (
        f"ü§ñ **–°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞ (–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä):**\n"
        f"-----------------------------------\n"
        f"**BOT_TOKEN:** {'‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if BOT_TOKEN else '‚ùå –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û'}\n"
        f"**ADMIN_ID:** `{ADMIN_ID}` ({'‚úÖ OK' if is_admin(update.effective_user.id) else '‚ùå –ü–û–ú–ò–õ–ö–ê ID'})\n"
        f"**–†–µ–∂–∏–º:** {'Webhook' if IS_WEBHOOK_MODE else 'Polling'}\n"
        f"**URL Webhook:** {'‚úÖ ' + WEBHOOK_URL if IS_WEBHOOK_MODE else '‚ùå –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è'}\n"
        f"**–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {len(BLOCKED_USERS)}\n"
    )
    await update.message.reply_text(status_text, parse_mode='Markdown')


# –ö–æ–º–∞–Ω–¥–∞ /block
async def handle_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID, –∑–∞–ø–æ–±—ñ–≥–∞—é—á–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—é –Ω–∏–º –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/block <ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞>`")
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º.")
        return

    if target_user_id in BLOCKED_USERS:
        await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_user_id} –≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.")
    else:
        BLOCKED_USERS.add(target_user_id)
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á **`{target_user_id}`** —É—Å–ø—ñ—à–Ω–æ **–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π**.")

# –ö–æ–º–∞–Ω–¥–∞ /unblock
async def handle_unblock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ–∑–±–ª–æ–∫–æ–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
        
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/unblock <ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞>`")
        return
    
    try:
        target_user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º.")
        return

    if target_user_id in BLOCKED_USERS:
        BLOCKED_USERS.remove(target_user_id)
        await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á **`{target_user_id}`** —É—Å–ø—ñ—à–Ω–æ **—Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π**.")
    else:
        await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á **`{target_user_id}`** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É —Å–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö.")


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∑ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    query = update.callback_query
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∑–∞–ø–∏—Ç, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
    await query.answer() 

    data = query.data
    
    # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏
    if data == 'action_text_guide':
        await query.edit_message_text(
            text="‚úçÔ∏è **–†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ—ó –∑–∞—è–≤–∫–∏**\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è. –Ø –≤—ñ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode='Markdown'
        )
    elif data == 'action_photo_guide':
        await query.edit_message_text(
            text="üì∏ **–†–µ–∂–∏–º —Ñ–æ—Ç–æ/–º–µ–¥—ñ–∞**\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–∏–π —Ñ–∞–π–ª: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é, –≤—ñ–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥—ñ–æ —á–∏ —Å—Ç—ñ–∫–µ—Ä. –í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ –æ–ø–∏—Å (–ø—ñ–¥–ø–∏—Å) –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.",
            parse_mode='Markdown'
        )
    elif data == 'action_help_info':
        help_text = (
            "‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞**\n\n"
            "–¶–µ–π –±–æ—Ç —Å–ª—É–≥—É—î –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ—ó –ø–µ—Ä–µ–¥–∞—á—ñ –∑–∞—è–≤–æ–∫ —Ç–∞ –ø–∏—Ç–∞–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. "
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º—É—î –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –º–æ–∂–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –≤–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
            "**–í–∞–∂–ª–∏–≤–æ:** –í–∞—à Telegram ID –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )
        await query.edit_message_text(text=help_text, parse_mode='Markdown')


# –ö–æ–º–∞–Ω–¥–∞ /reply –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–∑–≤–æ–ª—è—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑–∞ –π–æ–≥–æ ID."""
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚õî –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤: –æ—á—ñ–∫—É—î–º–æ /reply <user_id> <text>
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/reply <ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞> <–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å>`"
        )
        return

    try:
        target_user_id = int(context.args[0])
        reply_text = " ".join(context.args[1:])
        
        if not reply_text:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return

    except ValueError:
        await update.message.reply_text("‚ùå ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–≤–∏–º.")
        return

    # 3. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üë®‚Äçüíª **–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{reply_text}",
            parse_mode='Markdown'
        )
        await update.message.reply_text(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É **`{target_user_id}`**.")

    except BadRequest as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}: {e}")
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É **`{target_user_id}`**. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç –∞–±–æ –π–æ–≥–æ ID –Ω–µ–≤—ñ—Ä–Ω–∏–π. ({e})"
        )
    except Exception as e:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")


# –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–µ—Ä–µ—Å–∏–ª–∞—î —ó—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    message = update.message
    user = message.from_user
    
    # 0. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if user.id in BLOCKED_USERS:
        # –¢–∏—Ö–µ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        logger.info(f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –Ω–∞–º–∞–≥–∞–≤—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return

    # –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–∞–º–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ–≥–Ω–æ—Ä—É—î–º–æ –π–æ–≥–æ, —è–∫—â–æ —Ü–µ –Ω–µ /reply
    if is_admin(user.id):
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ ADMIN_ID –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    try:
        admin_chat_id = int(ADMIN_ID)
    except (ValueError, TypeError):
        logger.error("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    user_name = user.username
    display_name = f"@{user_name}" if user_name else user.first_name
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    reply_command_text = f"/reply {user.id} "
    reply_keyboard = [
        [InlineKeyboardButton("‚Ü©Ô∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", switch_inline_query_current_chat=reply_command_text)]
    ]
    reply_markup_admin = InlineKeyboardMarkup(reply_keyboard)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞ (–Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ç–µ–∫—Å—Ç–æ–º)
    admin_notification = (
        f"üì© **–ù–û–í–ê –ó–ê–Ø–í–ö–ê**\n"
        f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {display_name} (ID: `{user.id}`)\n"
        f"----------------------------------------\n"
        f"‚û°Ô∏è **–î–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—ñ–¥ —Ü–∏–º –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.**"
    )

    is_success = False

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —Ö–æ—á —è–∫–∏–π—Å—å –≤–º—ñ—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
    if message.text or message.photo or message.document or message.video or message.sticker or message.voice or message.audio:
        try:
            # 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=admin_notification,
                parse_mode='Markdown'
            )
            
            # 2. –ö–æ–ø—ñ—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Ç—ñ–∫–µ—Ä, –¥–æ–∫—É–º–µ–Ω—Ç —ñ —Ç.–¥.)
            # –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏–∫—Ä—ñ–ø–ª—é—î—Ç—å—Å—è –¥–æ —Å–∞–º–æ–≥–æ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ–≥–æ –≤–º—ñ—Å—Ç—É
            await message.copy_message(
                chat_id=admin_chat_id,
                reply_markup=reply_markup_admin
            )
            
            is_success = True
            
        except BadRequest as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            is_success = False
        except Exception as e:
            logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏: {e}")
            is_success = False
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if is_success:
        await message.reply_text("‚úÖ –î—è–∫—É—é! –í–∞—à—É –∑–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ö°")
    else:
        await message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤–∞—à–æ—ó –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


async def pre_run(app):
    """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Webhook."""
    if IS_WEBHOOK_MODE and WEBHOOK_URL:
        # –ü–†–ò–ú–£–°–û–í–ï –í–ò–î–ê–õ–ï–ù–ù–Ø –°–¢–ê–†–û–ì–û WEBHOOK —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
        logger.info("–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Å—Ç–∞—Ä–∏–π Webhook...")
        await app.bot.delete_webhook()
        logger.info("–°—Ç–∞—Ä–∏–π Webhook –≤–∏–¥–∞–ª–µ–Ω–æ (—è–∫—â–æ –≤—ñ–Ω –±—É–≤).")


def main():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç (Webhook –¥–ª—è Render)."""
    if not BOT_TOKEN or not ADMIN_ID:
        logger.critical("BOT_TOKEN –∞–±–æ ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
        return
        
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(pre_run).build()
    
    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("admin_status", admin_status))
    app.add_handler(CommandHandler("block", handle_block)) # –ù–û–í–ê –ö–û–ú–ê–ù–î–ê
    app.add_handler(CommandHandler("unblock", handle_unblock)) # –ù–û–í–ê –ö–û–ú–ê–ù–î–ê
    app.add_handler(CommandHandler("reply", handle_reply)) 
    app.add_handler(CallbackQueryHandler(handle_callback_query)) 
    # –û–±—Ä–æ–±–ª—è—î–º–æ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫—Ä—ñ–º –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    # --- –õ–û–ì–Ü–ö–ê –ó–ê–ü–£–°–ö–£ ---
    if IS_WEBHOOK_MODE:
        full_webhook_url = WEBHOOK_URL.rstrip('/') + '/' + BOT_TOKEN
        
        logger.info(f"‚úÖ –†–µ–∂–∏–º WEBHOOK. –ü–æ—Ä—Ç: {PORT}. URL: {full_webhook_url}")
        
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=full_webhook_url
        )

    else:
        logger.info("‚ùå –†–µ–∂–∏–º POLLING. –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ RENDER_URL –¥–ª—è Webhook.")

if __name__ == "__main__":
    main()

import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —ñ —Ç–≤—ñ–π Telegram ID
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞. Hardcode –≤–∏–¥–∞–ª–µ–Ω–æ!
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ /start")
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! ‚ö° –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞—è–≤–∫—É –∞–±–æ —Ñ–æ—Ç–æ, —ñ —è –ø–µ—Ä–µ–¥–∞–º —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

# –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ) —ñ –ø–µ—Ä–µ—Å–∏–ª–∞—î —ó—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    message = update.message
    user_name = message.from_user.username or message.from_user.first_name
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ ADMIN_ID –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    try:
        admin_chat_id = int(ADMIN_ID)
    except (ValueError, TypeError):
        logger.error("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ—Ç—Ä—ñ–±–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ).")
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–æ—Ç–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    # –§–æ—Ç–æ
    if message.photo:
        photo_file = await message.photo[-1].get_file()
        try:
            await context.bot.send_photo(
                chat_id=admin_chat_id,
                photo=photo_file.file_id,
                caption=f"üì∑ –§–æ—Ç–æ –≤—ñ–¥ @{user_name} ({message.from_user.id})"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –∞–¥–º—ñ–Ω—É: {e}")
            await message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

    # –¢–µ–∫—Å—Ç
    elif message.text:
        try:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=f"üì© –ó–∞—è–≤–∫–∞ –≤—ñ–¥ @{user_name} ({message.from_user.id}):\n{message.text}"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É –∞–¥–º—ñ–Ω—É: {e}")
            await message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.reply_text("‚úÖ –î—è–∫—É—é! –ó–∞—è–≤–∫—É –ø–µ—Ä–µ–¥–∞–Ω–æ ‚ö°")

def main():
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç."""
    if not BOT_TOKEN:
        logger.critical("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
        print("–ü–û–ú–ò–õ–ö–ê: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    if not ADMIN_ID:
        logger.critical("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
        print("–ü–û–ú–ò–õ–ö–ê: –ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ADMIN_ID –º–∞—î –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return
        
    logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        # ApplicationBuilder().token(BOT_TOKEN).build() - —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± —É ptb v20+
        app = ApplicationBuilder().token(BOT_TOKEN).build()
    except Exception as e:
        logger.critical(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ApplicationBuilder: {e}")
        return

    # –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    app.add_handler(CommandHandler("start", start))
    # filters.ALL & ~filters.COMMAND - —Ü–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∫—Ä—ñ–º –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ (Polling mode)...")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç
    app.run_polling()

if __name__ == "__main__":
    main()
